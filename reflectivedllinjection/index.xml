<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>reflective DLL injection :: Hacker Site</title><link>http://hacker0x0ff.red/reflectivedllinjection/index.html</link><description>函数总览
导出表获取
注意事项
windbg调试dll
windbg查看PEB
通过PEB和PE获取函数地址</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 23 Mar 2025 15:30:00 +0800</lastBuildDate><atom:link href="http://hacker0x0ff.red/reflectivedllinjection/index.xml" rel="self" type="application/rss+xml"/><item><title>通过PEB和PE导出表获取函数</title><link>http://hacker0x0ff.red/reflectivedllinjection/peb%E5%92%8Cpe%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80/index.html</link><pubDate>Sun, 23 Mar 2025 15:30:00 +0800</pubDate><guid>http://hacker0x0ff.red/reflectivedllinjection/peb%E5%92%8Cpe%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80/index.html</guid><description>peb结构获取dll地址
源码地址： https://github.com/harry-hard/blog-dev_code/tree/main/PEB
PBYTE getDllAddress(wchar_t* dllName) { //通过PEB结构获取dll地址 PPEB pPeb = __readgsqword(0x60); PPEB_LDR_DATA ldr = pPeb->Ldr; PLIST_ENTRY head = &amp;ldr->InMemoryOrderModuleList; PLIST_ENTRY flink = head->Flink; PBYTE kernel32dllAddr = NULL; while (flink != head) { PLDR_DATA_TABLE_ENTRY entry = (ULONG_PTR)flink - LDR_OFFSET; //AI写的 PWSTR filename = wcsrchr(entry->FullDllName.Buffer, L'\\'); filename = filename ? filename + 1 : entry->FullDllName.Buffer; //AI结束 if (_wcsicmp(filename, dllName) == 0) { kernel32dllAddr = entry->DllBase; break; } else flink = flink->Flink; } if (!</description></item><item><title>windbg访问peb结构</title><link>http://hacker0x0ff.red/reflectivedllinjection/windbg_peb/index.html</link><pubDate>Sun, 15 Dec 2024 15:30:00 +0800</pubDate><guid>http://hacker0x0ff.red/reflectivedllinjection/windbg_peb/index.html</guid><description>对于peb来说，ldr结构体指向的PEB_LDR_DATA结构;
PEB_LDR_DATA包含InMemoryOrderModuleList
InMemoryOrderModuleList 是链表的头节点
#首先更新符号： .reload /f ntdll.dll #查看peb，可以区分是x86还是x64: !peb 虽然是amd64架构，但程序是x86
（下文InMemoryOrderModuleList和InMemoryOrderLinks不要搞混）
所以有PEB_LDR_DATA→InMemoryOrderModuleList
InMemoryOrderModuleList→Flink，
Flink包含的指针指向LDR_DATA_TABLE_ENTRY
在LDR_DATA_TABLE_ENTRY 中又有InMemoryOrderLinks （和InMemoryOrderModuleList完全不是一回事，其中InMemoryOrderModuleList 是头节点，而InMemoryOrderLinks 是链表的组成部分）
**InMemoryOrderModuleList**32位进程中，于PEB_LDR_DATA中的偏移（offset）为0x14,
64位偏移为0x20;
InMemoryOrderLinks 32位进程中，在LDR_DATA_TABLE_ENTRY中的偏移为0x08，
64位偏移为0x10;
classDiagram class PEB { +0x00 Ldr : Ptr64 _PEB_LDR_DATA } class PEB_LDR_DATA { +0x00 Length : Uint4B +0x04 Initialized : UChar +0x08 SsHandle : Ptr64 Void +0x10 InLoadOrderModuleList : _LIST_ENTRY (32位偏移: 0x0C) +0x20 InMemoryOrderModuleList : _LIST_ENTRY (32位偏移: 0x14 | 64位偏移: 0x20) +0x30 InInitializationOrderModuleList : _LIST_ENTRY } class LDR_DATA_TABLE_ENTRY { +0x00 InLoadOrderLinks : _LIST_ENTRY (链表节点1) +0x08 InMemoryOrderLinks : _LIST_ENTRY (32位偏移: 0x08 | 64位偏移: 0x10) +0x10 InInitializationOrderLinks : _LIST_ENTRY +0x18 DllBase : Ptr64 Void +0x20 BaseDllName : _UNICODE_STRING } class _LIST_ENTRY { +0x00 Flink : Ptr64 _LIST_ENTRY +0x08 Blink : Ptr64 _LIST_ENTRY } PEB --> PEB_LDR_DATA : Ldr PEB_LDR_DATA --> _LIST_ENTRY : InMemoryOrderModuleList (头节点) _LIST_ENTRY --> LDR_DATA_TABLE_ENTRY : Flink -> InMemoryOrderLinks (链表节点) 1.</description></item><item><title>windbg调试dll</title><link>http://hacker0x0ff.red/reflectivedllinjection/windbg_dll/index.html</link><pubDate>Sun, 15 Dec 2024 15:30:00 +0800</pubDate><guid>http://hacker0x0ff.red/reflectivedllinjection/windbg_dll/index.html</guid><description>通过windbg调试dll:
首先要用relese模式编译dll文件，这样pdb调试文件的校验和才会注册
接下来要在注入器把dll注入到宿主进程之前，windbg附加到宿主进程
附加到宿主进程后会自动触发断点：
确保dll目录中有与之匹配的pdb文件
接下来输入需要加载的符号文件(.pdb)
.sympath+ C:\Project\Debug # 添加DLL的PDB路径（需编译时生成） .reload /f mydll.dll #重新加载要查看的dll的符号文件 重要！
在注入之前打上在dllmain上断点
bp myDll!DLLmain 接下来运行程序，
g 然后执行注入程序
如果pdb文件正确导入，那么在注入成功的一瞬间，会触发windbg的断点
调试pe结构：
# 假设DLL基地址为0x180000000： !dh 0x180000000 # 打印PE头（查找可选头） dt ntdll!_IMAGE_OPTIONAL_HEADER # 查看可选头结构定义 ? 0x180000000 + &lt;ImportTable RVA> # 计算导入表实际地址 基地址在processHacker2内可以找到
!dh 0x你的基地址 会打印头部信息
如果想要手动查找nt头和可选头，可以使用
# 读取 e_lfanew 的值（基址 + 0x3C） dd 0x你的基地址 + 0x3C L1 #3C是e_lfanew的固定大小 打印的100是nt头的偏移
# 基址 + NT Headers偏移 db 0x你的基地址 + 0x100 验证前4个字节是否为 50 45 00 00（nt头固定）</description></item><item><title>函数总览</title><link>http://hacker0x0ff.red/reflectivedllinjection/%E5%87%BD%E6%95%B0%E6%80%BB%E8%A7%88/index.html</link><pubDate>Sun, 15 Dec 2024 15:30:00 +0800</pubDate><guid>http://hacker0x0ff.red/reflectivedllinjection/%E5%87%BD%E6%95%B0%E6%80%BB%E8%A7%88/index.html</guid><description>DLLEXPORT ULONG_PTR WINAPI ReflectiveLoader() { // 1. 定位自身 PE 头（略） // 2. 分配内存并复制 PE 头和节区（略） // 3. 处理重定位 ProcessRelocations(memBase, delta); // 4. 解析导入表 ResolveImports(memBase); // 5. 设置内存权限 SetMemoryProtections(memBase); // 6. 调用 DllMain CallDllMain(memBase, DLL_PROCESS_ATTACH); return memBase; }</description></item><item><title>注意事项1</title><link>http://hacker0x0ff.red/reflectivedllinjection/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/index.html</link><pubDate>Sun, 15 Dec 2024 15:30:00 +0800</pubDate><guid>http://hacker0x0ff.red/reflectivedllinjection/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/index.html</guid><description>在编写dll部分时，为了方便执行dll，我写了一个程序快速执行dll
HMODULE dllname = LoadLibraryA("dll.dll"); if (!dllname) { printf("dllname don't exitsts!\n"); return 0; } ReflectiveLoaderFunc myfuc = (ReflectiveLoaderFunc)GetProcAddress(dllname, "ReflectiveLoader"); myfuc(); 然而这样的程序在反射式dll处理重定位表时会出大问题： • 通过 LoadLibrary 加载的DLL已被系统修改（重定位+导入表处理），.reloc 节可能被丢弃或擦写。</description></item><item><title>获取磁盘dll(未加载)的导出表</title><link>http://hacker0x0ff.red/reflectivedllinjection/%E5%AF%BC%E5%87%BA%E8%A1%A8%E8%8E%B7%E5%8F%96%E7%A3%81%E7%9B%98/index.html</link><pubDate>Sun, 15 Dec 2024 15:30:00 +0800</pubDate><guid>http://hacker0x0ff.red/reflectivedllinjection/%E5%AF%BC%E5%87%BA%E8%A1%A8%E8%8E%B7%E5%8F%96%E7%A3%81%E7%9B%98/index.html</guid><description>磁盘中的RVA和加载后的RVA访问方式是不同的
如果已经按内存要求加载：
基地址+DataDirectory[0]
如果还是硬盘格式：
偏移量 = RVA - 区段的VirtualAddress + 区段的PointerToRawData 基地址+偏移量
这里主要理解内存格式和硬盘格式对RVA的影响</description></item></channel></rss>