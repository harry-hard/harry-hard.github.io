<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>更多导入表内容 :: Hacker Site</title><link>https://harry-hard.github.io/pe-loader/iat%E4%BF%AE%E5%A4%8D/%E6%9B%B4%E5%A4%9A/index.html</link><description/><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 15 Dec 2024 15:30:00 +0800</lastBuildDate><atom:link href="https://harry-hard.github.io/pe-loader/iat%E4%BF%AE%E5%A4%8D/%E6%9B%B4%E5%A4%9A/index.xml" rel="self" type="application/rss+xml"/><item><title>关于IAT</title><link>https://harry-hard.github.io/pe-loader/iat%E4%BF%AE%E5%A4%8D/%E6%9B%B4%E5%A4%9A/%E5%85%B3%E4%BA%8Eiat/index.html</link><pubDate>Sun, 15 Dec 2024 15:30:00 +0800</pubDate><guid>https://harry-hard.github.io/pe-loader/iat%E4%BF%AE%E5%A4%8D/%E6%9B%B4%E5%A4%9A/%E5%85%B3%E4%BA%8Eiat/index.html</guid><description>IAT dll包含 可以通过IMAGE_IMPORT_DESCRIPTOR访问PE文件中DLL名称，INT，IAT的地址
typedef struct _IMAGE_IMPORT_DESCRIPTOR { union { DWORD Characteristics; // 0 表示结构数组的结束 DWORD OriginalFirstThunk; // 指向 INT (Import Name Table) } DUMMYUNIONNAME; DWORD TimeDateStamp; // 时间戳 DWORD ForwarderChain; // 转发链 DWORD Name; // DLL名称的RVA DWORD FirstThunk; // 指向 IAT (Import Address Table) } IMAGE_IMPORT_DESCRIPTOR; // PE文件的导入表可能是这样的： 导入表 ├── Import Descriptor 1 (kernel32.dll) │ ├── Name: "kernel32.dll" //DLL的名称 │ ├── OriginalFirstThunk: -> [函数1, 函数2, ...] //INT的RVA │ └── FirstThunk: -> [地址1, 地址2, .</description></item></channel></rss>